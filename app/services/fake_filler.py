import random
from uuid import uuid4
from faker import Faker
from geoalchemy2 import WKTElement

from app.database.db_helper import AsyncDatabaseHelper
from app.database.models import (
    Building, 
    Activity, 
    Organization, 
    OrganizationPhone
)
from app.database.repositories.fake_filler import FakeFillerRepository


class FakeFiller():
    def __init__(self, db_helper: AsyncDatabaseHelper):
        self.fake = Faker(['ru_RU'])  # –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
        self.db_helper = db_helper
        self.repository = FakeFillerRepository(db_helper)

    async def create_activities(self, count: int = 50):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        activities = []
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ)
        main_categories = [
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ü–∏–Ω–∞", "–¢–æ—Ä–≥–æ–≤–ª—è", "–û–±—â–µ–ø–∏—Ç", "–£—Å–ª—É–≥–∏",
            "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–§–∏–Ω–∞–Ω—Å—ã", "IT"
        ]
        
        parent_activities = []
        for category in main_categories:
            activity = Activity(
                id=uuid4(),
                name=category,
                parent_id=None,
                level=1
            )
            activities.append(activity)
            parent_activities.append(activity)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories_per_category = count // len(main_categories)
        for parent in parent_activities:
            for _ in range(subcategories_per_category):
                subcategory = Activity(
                    id=uuid4(),
                    name=self.fake.catch_phrase(),
                    parent_id=parent.id,
                    level=2
                )
                activities.append(subcategory)
        
        created_activities = await self.repository.create_activities(activities)
        print(f"–°–æ–∑–¥–∞–Ω–æ {len(created_activities)} –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 UUID –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üìã –ü—Ä–∏–º–µ—Ä—ã UUID –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        for i, activity in enumerate(created_activities[:5]):
            print(f"   {i+1}. {activity.id}")
        
        return created_activities

    async def create_buildings(self, count: int = 2000):
        """–°–æ–∑–¥–∞–µ—Ç –∑–¥–∞–Ω–∏—è —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π"""
        buildings = []
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ú–æ—Å–∫–≤—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        moscow_lat_range = (55.5, 55.9)
        moscow_lon_range = (37.3, 37.9)
        
        for _ in range(count):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–æ—Å–∫–≤—ã
            latitude = random.uniform(*moscow_lat_range)
            longitude = random.uniform(*moscow_lon_range)
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Ç–æ—á–∫–∏
            location = WKTElement(f'POINT({longitude} {latitude})', srid=4326)
            
            building = Building(
                id=uuid4(),
                address=self.fake.address(),
                location=location
            )
            buildings.append(building)
        
        created_buildings = await self.repository.create_buildings(buildings)
        print(f"–°–æ–∑–¥–∞–Ω–æ {len(created_buildings)} –∑–¥–∞–Ω–∏–π")
        
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 UUID –∑–¥–∞–Ω–∏–π
        print("üè¢ –ü—Ä–∏–º–µ—Ä—ã UUID –∑–¥–∞–Ω–∏–π:")
        for i, building in enumerate(created_buildings[:5]):
            print(f"   {i+1}. {building.id}")
        
        return created_buildings

    async def create_organizations(self, buildings: list, activities: list, count: int = 10000):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ –∏ —Å–≤—è–∑—è–º–∏ —Å –≤–∏–¥–∞–º–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        organizations = []
        organization_phones = []
        org_activity_relations = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î
        all_activities = await self.repository.get_all_activities()
        
        for i in range(count):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
            building = random.choice(buildings)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            organization = Organization(
                id=uuid4(),
                name=self.fake.company(),
                building_id=building.id
            )
            organizations.append(organization)
            
            # –î–æ–±–∞–≤–ª—è–µ–º 1-3 —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            phone_count = random.randint(1, 3)
            for _ in range(phone_count):
                phone = OrganizationPhone(
                    id=uuid4(),
                    organization_id=organization.id,
                    phone=self.fake.phone_number()
                )
                organization_phones.append(phone)
            
            # –°–≤—è–∑—ã–≤–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å 1-5 –≤–∏–¥–∞–º–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            activity_count = random.randint(1, 5)
            selected_activities = random.sample(all_activities, activity_count)
            
            for activity in selected_activities:
                relation = {
                    'organization_id': organization.id,
                    'activity_id': activity.id
                }
                org_activity_relations.append(relation)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        created_organizations = await self.repository.create_organizations(organizations)
        await self.repository.create_organization_phones(organization_phones)
        await self.repository.create_organization_activity_relations(org_activity_relations)
        
        print(f"–°–æ–∑–¥–∞–Ω–æ {len(created_organizations)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ –∏ —Å–≤—è–∑—è–º–∏")
        
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 UUID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        print("üè¢ –ü—Ä–∏–º–µ—Ä—ã UUID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:")
        for i, organization in enumerate(created_organizations[:5]):
            print(f"   {i+1}. {organization.id}")
        
        return created_organizations

    async def clear_database(self):
        """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        await self.repository.clear_all_tables()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")

    async def fill_database(self, organizations_count: int = 10000):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.clear_database()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            print("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            activities = await self.create_activities(50)
            
            print("–°–æ–∑–¥–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π...")
            buildings = await self.create_buildings(2000)
            
            print("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...")
            organizations = await self.create_organizations(buildings, activities, organizations_count)
            
            print(f"\n‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise